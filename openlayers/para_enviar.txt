html:
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visor geografico</title>
    <link rel="stylesheet" href="./style.css">
    <link rel="stylesheet" href="libs/ol.css">
    <script src="https://unpkg.com/@phosphor-icons/web"></script>

</head>

<body>
    <div class="grid-container">
        <div class="sidebar">
            <h2 class="titulo">Selección de indicadores</h2>
            <h3>Selección por indicador</h3>
            <div id="indicator-container" class="selection-container"></div>
            <h3>Selección por clúster</h3>
            <div id="cluster-container" class="selection-container"></div>

        </div>
        <div class="map-container">
            <div id="js-map" class="map"></div>
        </div>
    </div>
    <div class="overlay-container">
        <span class="overlay-text" id="feature-name"></span><br>
        <span class="overlay-text" id="feature-data"></span><br>
    </div>

    <script src="./libs/dist/ol.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.1.0/chroma.min.js"></script>

    <script src="./js_files/main.js"></script>
    <script src="./js_files/initializeMap.js"></script>
    <script src="./js_files/indicadorDisplay.js"></script>
    <script src="./js_files/clusterDisplay.js"></script>
</body>

</html>

css:
* {
    box-sizing: border-box;
}

body {
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    font-size: 14px;
    margin: 0;
    padding: 0
}

.grid-container {
    display: grid;
    grid-template-columns: 20vw 80vw;
    grid-template-rows: 100vh;
    background-color: #CC0000;
    border-right: red;
    color: whitesmoke;
}

.titulo {
    font-size: 30px;
    text-align: letf;
    margin-left: 5px;
    color: whitesmoke;
}

h3 {
    font-size: 1.2em;
    margin-top: 1em;
    margin-bottom: 0.5em;
}

.sidebar {
    background-color: #cc0000;
    color: white;
    padding: 10px;
    overflow-y: auto;
    margin-left: 15px;
}

/* ----- INDICATORS ----- */

.indicator-label,
.cluster-label {
    margin: 10px;
    align-items: center;
}

.indicatorSelect,
.clusterSelect {
    margin-right: 100px;
}

.sub-indicators,
.sub-clusters {
    display: none;
    text-align: left;
    padding-left: 15px;
    vertical-align: middle;
}

.nested-sub-option {
    padding-left: 20px;
}

label {
    display: grid;
    grid-template-columns: auto 1fr;
    /* Ajusta las columnas: icono y texto */
    gap: 10px;
    /* Ajusta el espacio entre las columnas según sea necesario */
    color: whitesmoke;
    font-weight: bold;
    /* padding: 10px; */
    /* Ajusta el relleno según sea necesario */
}

.icon {
    justify-self: start;
    /* Alinea el icono al inicio */
}

.text-container,
.dropdown-toggle {
    display: flex;
    align-items: center;
    color: whitesmoke;
    font-weight: bold;
}



*/ .map-container {
    position: relative;
}

.map {
    width: 100%;
    height: 100%;
}

/* Feature Overlay */
.overlay-container {
    background-color: rgba(173, 216, 230, 0.8);
    border: 2px solid rgba(8, 70, 91);
    width: 150px;
    color: black;
    font-weight: bold;
    text-align: center;
    border-radius: 10px;
    padding: 2px 0;
    position: absolute;
    z-index: 1;
    bottom: 100%;
    left: 50%;
    margin-left: -80px;
}

.overlay-container #feature-data::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -10px;
    border-width: 10px;
    border-style: solid;
    border-color: rgba(8, 70, 91, 0.8) transparent transparent transparent;
}

----------------------------------- main.js:
window.onload = init;

let data = null;
let ratio = null;
let minRatio = Infinity;
let maxRatio = -Infinity;
let selectedRatio = 'ratio_empleo_por_poblacion_activa';
let standardValue = 1;
let municipiosSeleccionados = [];

let indicadores = {
    'Índice de contratación': 'ratio_contratos',
    'Índice de empleabilidad': 'ratio_empleo',
    'Índice de paro': 'ratio_paro',
    'Índice de empleabilidad vs paro': 'ratio_empleo_vs_paro',
    'Índice de disponibilidad empresarial': 'ratio_up',
    'Índice de contratación empresarial': 'ratio_contratos_por_up'
}

let subIndicadores = {
    'Total': 'por_poblacion_activa',
    'Sector primario': 'primario_por_poblacion_activa',
    'Sector secundario': 'secundario_por_poblacion_activa',
    'Sector terciario': 'terciario_por_poblacion_activa',
};

function defineAgeIntervals() {
    const startAge = 15;
    const endAge = 64;
    const interval = 5;
    const ageIntervals = {};

    for (let age = startAge; age <= endAge; age += interval) {
        const nextAge = age + interval - 1;
        const key = `${age}-${nextAge} años`;
        const value = `por_poblacion_censada_${age}a${nextAge}`;
        ageIntervals[key] = value;
    }

    return ageIntervals;
}

subIndicadores = { ...subIndicadores, ...defineAgeIntervals() };
console.log(subIndicadores);

let clusterVariables = {
    'Densidad de población': 'cluster_densidad_poblacion',
    'Distancia a la capital': 'cluster_distancia_capital',
    'Población censada': 'cluster_poblacion_censada',
    'Zona estadística': 'cluster_zona_estadistica'
};

let clusterNumbers = {
    'Clúster 0': '0.0',
    'Clúster 1': '1.0',
    'Clúster 2': '2.0'
};

function loadData() {
    return fetch('../dataset.json')
        .then(response => response.json())
        .then(jsonData => {
            data = jsonData;
            console.log('Datos cargados:', data);
        })
        .catch(error => console.error('Error al cargar el JSON:', error));
}

function init() {
    loadData().then(initializeMap).catch(error => console.error('Error durante la inicialización:', error));
}

// Reglas de normalización basadas en expresiones regulares
function nameTransform(nombre) {
    const patron = /^(La|Las|El|Los)\s(.+)$/;

    if (patron.test(nombre)) {
        const reemplazo = '$2 ($1)';
        return nombre.replace(patron, reemplazo);
    } else {
        return nombre;
    }
}

function maxMinRatios() {
    municipiosSeleccionados.forEach(entry => {
        const ratio = parseFloat(entry[selectedRatio]);
        if (!isNaN(ratio)) {
            if (ratio < minRatio) minRatio = ratio;
            if (ratio > maxRatio) maxRatio = ratio;
        }
        console.log('Max', maxRatio, 'Min', minRatio);
    });
}

function getFeatureStyle(ratio) {
    if (!ratio || isNaN(ratio)) {
        return new ol.style.Style({
            fill: new ol.style.Fill({
                color: [255, 255, 255, 0.2]
            }),
            stroke: new ol.style.Stroke({
                color: [0, 0, 0, 1],
                width: 1.2
            })
        });
    }

    const scale = chroma.scale(['#f00', 'lightgreen', '#0f0']).mode('lrgb').domain([minRatio, standardValue, maxRatio]);
    let fillColor = scale(ratio).rgba();
    fillColor[3] = 0.5;

    return new ol.style.Style({
        fill: new ol.style.Fill({
            color: fillColor
        }),
        stroke: new ol.style.Stroke({
            color: [0, 0, 0, 1],
            width: 1.2
        })
    });
}

function isSelectedMunicipio(nombre) {
    const nombreNormalizado = nameTransform(nombre);
    return municipiosSeleccionados.some(entry => entry.Nombre === nombreNormalizado);
}

function updateSelectedMunicipios() {
    const cluster_dict = getSelectedCluster();
    const clusterVariable = clusterVariables[cluster_dict['cluster']];
    const clusterNumber = clusterNumbers[cluster_dict['subCluster']];

    municipiosSeleccionados = data.filter(municipio => municipio[clusterVariable] === clusterNumber);
}


function updateStyles(MunicipiosDelimiter) {
    MunicipiosDelimiter.setStyle(function (feature) {
        const name = feature.get('NAMEUNIT');
        const nombreNormalizado = nameTransform(name);
        const municipio = data.find(entry => entry.Nombre === nombreNormalizado);
        const ratio = municipio ? parseFloat(municipio[selectedRatio]) : null;
        const isSelected = municipiosSeleccionados.some(entry => entry.Nombre === nombreNormalizado);
        if (isSelected && municipio && !isNaN(ratio) && ratio) {
            return getFeatureStyle(ratio);
        } else {
            return getFeatureStyle(null);
        }
    });
}

// Define la función updateSelectedIndicator
function updateSelectedIndicator(name) {
    const indicator_dict = getSelectedIndicator();
    ratioIndicator = indicator_dict['indicator'];
    ratioSubIndicator = indicator_dict['subIndicator']
    if (ratioIndicator === 'Índice de contratación'
        || ratioIndicator === 'Índice de empleabilidad'
        || ratioIndicator === 'Índice de paro'
        || ratioIndicator === 'Índice de disponibilidad empresarial') {
        selectedRatio = `${indicadores[ratioIndicator]}_${subIndicadores[ratioSubIndicator]}`;
        console.log(selectedRatio);
    } else if (ratioIndicator === 'Índice de contratación empresarial'
        || ratioIndicator === 'Índice de empleabilidad vs paro') {
        selectedRatio = `${indicadores[ratioIndicator]}`;
        console.log(selectedRatio);
    }
}





-------------------------------- clusterDisplay.js:
let selectedCluster = null;
let selectedSubCluster = null;

// function getSelectedCluster() {
//     return { cluster: selectedCluster, subCluster: selectedSubCluster };
// }

document.addEventListener('DOMContentLoaded', function () {
    const clusters = [
        { label: "Densidad de población", className: "cluster-dp" },
        { label: "Distancia a la capital", className: "cluster-dc" },
        { label: "Población censada", className: "cluster-pc" },
        { label: "Zona estadística", className: "cluster-ze" }
    ];


    function createClusterElements() {
        const container = document.getElementById('cluster-container');

        clusters.forEach(cluster => {
            const clusterDiv = document.createElement('div');
            clusterDiv.className = cluster.className;

            const label = document.createElement('label');
            label.className = 'cluster-label';

            const input = document.createElement('input');
            input.type = 'radio';
            input.className = 'clusterSelect';
            input.name = 'clusterRadioButton';
            input.value = cluster.label;
            input.style.display = 'none';

            const icon = document.createElement('i');
            icon.className = 'ph ph-caret-double-right';

            const text = document.createTextNode(` ${cluster.label}`);

            label.appendChild(input);
            label.appendChild(icon);
            label.appendChild(text);

            const subClustersDiv = document.createElement('div');
            subClustersDiv.className = 'sub-clusters';

            const subOptions = ['Clúster 0', 'Clúster 1', 'Clúster 2'];

            subOptions.forEach(option => {
                const subOptionDiv = document.createElement('div');
                subOptionDiv.className = 'sub-cluster';
                const subLabel = document.createElement('label');
                subLabel.className = 'sub-label';

                const subInput = document.createElement('input');
                subInput.type = 'radio';
                subInput.className = 'subClusterSelect';
                subInput.name = `subClusterRadioButton`;
                subInput.value = option;
                subInput.style.display = 'none';

                const subIcon = document.createElement('i');
                subIcon.className = 'ph ph-circle';

                const subText = document.createTextNode(` ${option}`);

                subLabel.appendChild(subInput);
                subLabel.appendChild(subIcon);
                subLabel.appendChild(subText);

                subLabel.addEventListener('click', () => {
                    const groupName = `subClusterRadioButton`;
                    const allSameGroupInputs = document.querySelectorAll(`input[name='${groupName}']`);
                    allSameGroupInputs.forEach(input => {
                        const icon = input.nextElementSibling;
                        if (icon.classList.contains('ph-x-circle')) {
                            icon.className = 'ph ph-circle';
                        }
                    });

                    if (subIcon.classList.contains('ph-circle')) {
                        subIcon.className = 'ph ph-x-circle';
                        selectedSubCluster = option;
                    } else {
                        subIcon.className = 'ph ph-circle';
                        selectedSubCluster = null;
                    }

                });

                subOptionDiv.appendChild(subLabel);
                subClustersDiv.appendChild(subOptionDiv);
                subClustersDiv.appendChild(document.createElement('br'));
            });

            clusterDiv.appendChild(label);
            clusterDiv.appendChild(subClustersDiv);
            container.appendChild(clusterDiv);
        });
    }

    createClusterElements();

    const clusterSelects = document.querySelectorAll('.clusterSelect');

    clusterSelects.forEach(clusterSelect => {
        clusterSelect.addEventListener('click', function () {
            selectedCluster = this.value;
            const subClusters = this.parentElement.nextElementSibling;
            const icon = this.parentElement.querySelector('.ph-caret-double-right, .ph-caret-double-down');

            if (subClusters && subClusters.classList.contains('sub-clusters')) {
                if (subClusters.style.display === 'none' || subClusters.style.display === '') {
                    subClusters.style.display = 'block';
                    icon.classList.remove('ph-caret-double-right');
                    icon.classList.add('ph-caret-double-down');
                } else {
                    subClusters.style.display = 'none';
                    icon.classList.remove('ph-caret-double-down');
                    icon.classList.add('ph-caret-double-right');
                }
            }
        });
    });
});

------------------------------ indicadorDisplay.js:


let indicators = [
    { label: "Índice de contratación", className: "ratio-contratos", options: ['Total', 'Por sector', 'Por edad'] },
    { label: "Índice de empleabilidad", className: "ratio-empleo", options: ['Total', 'Por sector', 'Por edad'] },
    { label: "Índice de paro", className: "ratio-paro", options: ['Total', 'Por edad'] },
    { label: "Índice de empleabilidad vs paro", className: "ratio-empleo-vs-paro", options: ['Total'] },
    { label: "Índice de contratación empresarial", className: "ratio-empresa", options: ['Total'] },
    { label: "Índice de disponibilidad empresarial", className: "ratio-disponibilidad", options: ['Total'] },
];

let selectedIndicator = null;
let selectedSubIndicator = null;

function getSelectedIndicator() {
    return { indicator: selectedIndicator, subIndicator: selectedSubIndicator };
}


document.addEventListener('DOMContentLoaded', function () {
    function createIndicatorElements() {
        const container = document.getElementById('indicator-container');

        indicators.forEach(indicator => {
            const indicatorDiv = document.createElement('div');
            indicatorDiv.className = indicator.className;

            const label = document.createElement('label');
            label.className = 'indicator-label';

            const input = document.createElement('input');
            input.type = 'radio';
            input.className = 'indicatorSelect';
            input.name = 'indicatorRadioButton';
            input.value = indicator.label;
            input.style.display = 'none';

            const icon = document.createElement('i');
            icon.className = 'ph ph-caret-double-right';

            const text = document.createTextNode(` ${indicator.label}`);

            label.appendChild(input);
            label.appendChild(icon);
            label.appendChild(text);

            label.style.display = 'grid';

            const subIndicatorsDiv = document.createElement('div');
            subIndicatorsDiv.className = 'sub-indicators';

            const subOptions = indicator['options'];

            subOptions.forEach(option => {
                const subOptionDiv = document.createElement('div');
                subOptionDiv.className = 'sub-option';
                if (option === 'Por sector' || option === 'Por edad') {
                    const dropdownToggle = document.createElement('div');
                    dropdownToggle.className = 'dropdown-toggle';

                    const dropdownIcon = document.createElement('i');
                    dropdownIcon.className = 'ph ph-caret-double-right';

                    const dropdownText = document.createTextNode(` ${option}`);

                    dropdownToggle.appendChild(dropdownIcon);
                    dropdownToggle.appendChild(dropdownText);

                    const nestedSubIndicatorsDiv = document.createElement('div');
                    nestedSubIndicatorsDiv.className = 'options';

                    let nestedOptions = [];
                    if (option === 'Por sector') {
                        nestedOptions = ['Sector primario', 'Sector secundario', 'Sector terciario'];
                    } else if (option === 'Por edad') {
                        nestedOptions = ['15-19 años', '20-24 años', '25-29 años', '30-34 años', '35-39 años',
                            '40-44 años', '45-49 años', '50-54 años', '55-59 años', '60-64 años'];
                    }

                    nestedOptions.forEach(nestedOption => {
                        const nestedSubOptionDiv = document.createElement('div');
                        nestedSubOptionDiv.className = 'nested-sub-option';

                        const nestedLabel = document.createElement('label');
                        nestedLabel.className = 'nested-label';

                        const nestedSubInput = document.createElement('input');
                        nestedSubInput.type = 'radio';
                        nestedSubInput.className = 'nestedSubIndicatorSelect';
                        nestedSubInput.name = `subIndicatorRadioButton`;
                        nestedSubInput.value = nestedOption;
                        nestedSubInput.style.display = 'none';

                        const nestedIcon = document.createElement('i');
                        nestedIcon.className = 'ph ph-circle';

                        const nestedSubText = document.createTextNode(` ${nestedOption}`);

                        nestedLabel.appendChild(nestedSubInput);
                        nestedLabel.appendChild(nestedIcon);
                        nestedLabel.appendChild(nestedSubText);

                        nestedLabel.addEventListener('click', () => {
                            const groupName = `subIndicatorRadioButton`;
                            const allSameGroupInputs = document.querySelectorAll(`input[name='${groupName}']`);
                            allSameGroupInputs.forEach(input => {
                                const icon = input.nextElementSibling;
                                if (icon.classList.contains('ph-x-circle')) {
                                    icon.className = 'ph ph-circle';
                                }
                            });

                            if (nestedIcon.classList.contains('ph-circle')) {
                                nestedIcon.className = 'ph ph-x-circle';
                                selectedSubIndicator = nestedOption;
                            } else {
                                nestedIcon.className = 'ph ph-circle';
                                selectedSubIndicator = null;
                            }
                            updateSelectedIndicator();
                        });

                        nestedSubOptionDiv.appendChild(nestedLabel);
                        nestedSubIndicatorsDiv.appendChild(nestedSubOptionDiv);
                        nestedSubIndicatorsDiv.style.display = 'none';
                    });

                    dropdownToggle.addEventListener('click', () => {
                        nestedSubIndicatorsDiv.style.display = nestedSubIndicatorsDiv.style.display === 'none' || nestedSubIndicatorsDiv.style.display === '' ? 'block' : 'none';
                        dropdownIcon.classList.toggle('ph-caret-double-down');
                        dropdownIcon.classList.toggle('ph-caret-double-right');
                    });

                    subOptionDiv.appendChild(dropdownToggle);
                    subOptionDiv.appendChild(nestedSubIndicatorsDiv);
                } else {
                    const subLabel = document.createElement('label');
                    subLabel.className = 'sub-label';

                    const subInput = document.createElement('input');
                    subInput.type = 'radio';
                    subInput.className = 'subIndicatorSelect';
                    subInput.name = `subIndicatorRadioButton`;
                    subInput.value = option;
                    subInput.style.display = 'none';

                    subLabel.addEventListener('click', () => {
                        const groupName = `subIndicatorRadioButton`;
                        const allSameGroupInputs = document.querySelectorAll(`input[name='${groupName}']`);
                        allSameGroupInputs.forEach(input => {
                            const icon = input.nextElementSibling;
                            if (icon.classList.contains('ph-x-circle')) {
                                icon.className = 'ph ph-circle';
                            }
                        });

                        if (subIcon.classList.contains('ph-circle')) {
                            subIcon.className = 'ph ph-x-circle';
                            selectedSubIndicator = option;
                        } else {
                            subIcon.className = 'ph ph-circle';
                            selectedSubIndicator = null;
                        }
                        updateSelectedIndicator();
                    });

                    const subIcon = document.createElement('i');
                    subIcon.className = 'ph ph-circle';

                    const subText = document.createTextNode(` ${option}`);

                    subLabel.appendChild(subInput);
                    subLabel.appendChild(subIcon);
                    subLabel.appendChild(subText);

                    subOptionDiv.appendChild(subLabel);
                }

                subIndicatorsDiv.appendChild(subOptionDiv);
                subIndicatorsDiv.appendChild(document.createElement('br'));
            });

            indicatorDiv.appendChild(label);
            indicatorDiv.appendChild(subIndicatorsDiv);
            container.appendChild(indicatorDiv);
        });
    }

    createIndicatorElements();

    const indicatorSelects = document.querySelectorAll('.indicatorSelect');

    indicatorSelects.forEach(indicatorSelect => {
        indicatorSelect.addEventListener('click', function () {
            selectedIndicator = this.value;
            const subIndicators = this.parentElement.nextElementSibling;
            const icon = this.parentElement.querySelector('.ph-caret-double-right, .ph-caret-double-down');

            if (subIndicators && subIndicators.classList.contains('sub-indicators')) {
                if (subIndicators.style.display === 'none' || subIndicators.style.display === '') {
                    subIndicators.style.display = 'block';
                    icon.classList.remove('ph-caret-double-right');
                    icon.classList.add('ph-caret-double-down');
                } else {
                    subIndicators.style.display = 'none';
                    icon.classList.remove('ph-caret-double-down');
                    icon.classList.add('ph-caret-double-right');
                }
            }
        });
    });
});


------------------------------------- initializeMap.js:
function initializeMap() {
    console.log('Inicializando el mapa...');

    // Mapa base
    const map = new ol.Map({
        view: new ol.View({
            center: [-401991.8169733428, 4938199.319627684],
            zoom: 9,
            maxZoom: 20,
            minZoom: 4,
        }),
        target: "js-map"
    });

    const baseLayer = new ol.layer.Tile({
        source: new ol.source.OSM(),
        visible: true,
        title: 'Standard'
    });

    const MunicipiosDelimiter = new ol.layer.VectorImage({
        source: new ol.source.Vector({
            url: './geo_data/municipios.geojson',
            format: new ol.format.GeoJSON()
        }),
        visible: true,
        title: 'municipiosDelimiter',
        style: function (feature) {
            const name = feature.get('NAMEUNIT');
            return updateStyles(MunicipiosDelimiter);
        },
    });

    // Grupo de capas base
    const baseLayerGroup = new ol.layer.Group({
        layers: [baseLayer, MunicipiosDelimiter]
    });

    const overlayContainerElement = document.querySelector('.overlay-container');
    const overlayLayer = new ol.Overlay({
        element: overlayContainerElement
    });

    map.addOverlay(overlayLayer);
    const overlayFeatureName = document.getElementById('feature-name');
    const overlayFeatureData = document.getElementById('feature-data');
    map.on('click', function (e) {
        overlayLayer.setPosition(undefined);
        map.forEachFeatureAtPixel(e.pixel, function (feature, layer) {
            let clickCoordinate = e.coordinate;
            let clickFeatureName = feature.get('NAMEUNIT');
            let clickFeatureData = '';
            const matchingData = data.find(entry => entry.Nombre === nameTransform(clickFeatureName));
            if (matchingData && matchingData[selectedRatio] !== undefined) {
                clickFeatureData = matchingData[selectedRatio];
            } else if (matchingData && matchingData && matchingData[selectedRatio] === undefined) {
                clickFeatureData = '';
            } else {
                clickFeatureData = 'Datos no encontrados';
            }
            overlayLayer.setPosition(clickCoordinate);
            overlayFeatureName.innerHTML = clickFeatureName;
            overlayFeatureData.innerHTML = clickFeatureData;
        }, {
            layerFilter: function (layerCandidate) {
                return layerCandidate.get('title') == 'municipiosDelimiter';
            }
        });
    });

    function setupSelectListeners(MunicipiosDelimiter) {
        const clusterSelects = document.querySelectorAll('.subClusterSelect');
        const subIndicatorSelects = document.querySelectorAll('.subIndicatorSelect, .nestedSubIndicatorSelect');
        clusterSelects.forEach(clusterSelect => {
            clusterSelect.addEventListener('change', function () {
                updateSelectedMunicipios();
                updateStyles(MunicipiosDelimiter);
            });
        });
        subIndicatorSelects.forEach(clusterSelect => {
            clusterSelect.addEventListener('change', function () {
                maxMinRatios();
                console.log('funciona');
                updateSelectedMunicipios();
                updateStyles(MunicipiosDelimiter);
            });
        });
    }
    function setupIndicatorsSelectListeners() {
    }

    map.addLayer(baseLayerGroup);

    setupSelectListeners(MunicipiosDelimiter);

    console.log('Capas añadidas al mapa.');
}





